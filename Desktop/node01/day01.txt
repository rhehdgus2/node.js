Node.js
1. 백엔드 개발자가 사용하는 언어이다.
2. 서버에서 실행되는 자바스크립트 한경이다.
3. Google V8 JavaScript 엔진을 사용해 코드를 실행하고 기본 모듈이 자바스크립트로 사용된다.
4. Node.js에는 웹 서버(apache, tomcat, iis, zeus, ..)과 같은 소프트웨어가 필요없이 웹 서버 역할을 할 수 있는 내장 라이브러리가 있다.

package.json 파일 만들기
모듈을 관리하는 설정파일

node.js를 실행하기 위해 프로젝트 폴더 생성
npm init : 옵션을 직접 제공
npm init -y : 기본값을 기준으로 바로 생성

node.js 실행하는 방법
node 파일이름

node 실행중지 ctrl + c

FileSystem 모듈
파일처리와 관련된 모듈입니다. node.js에서 가장 중요하고 기초가 되는 모듈입니다.

메소드
readFile() : 파일을 비동기적으로 읽음
readFileSync() : 파일을 동기적으로 읽음
writeFile() : 파일을 비동기적으로 적음
writeFileSync() : 파일을 동기적으로 적음

* 동기와 비동기
- 프로그램이 동작하는 상태에서 완전히 해당 내용을 끝내고 다음으로 제어를 넘기는 방식을 동기식, 동작이 끝나지 않은 상태에서도 제어권을 넘긴 후 프로그램을 계속 진행하면 비동기식이라 한다.

* 예외처리(Exception) - 프로그램이 실행되고 있는 런타임시에 에러가 발생할 경우 처리할 수 있는 프로그램 구간을 의미함.
try {
    예외 상황이 발생할 수 있는 문장
    ....
    ....
} catch(e) {
    예외 상황이 발생했을 경우 처리할 문장(e는 Exception 객체)
} finally {
    예외 상황이 발생하거나 발생하지 않아도 무조건 실행될 문장(생략가능)
}

이벤트 루프(Event Loop)
node.js는 서버가 가동되면 변수들을 초기화하고 함수를 선언하고 이벤트가 발생할 때까지 기다린다. 이벤트가 감지되었을 때 call back 함수 호출함

events : 이벤트 위주의 프로그램을 작성할 때 사용하는 모듈

메소드
on() : 지정한 이벤트의 리스너를 추가한다.
once() : 지정한 이벤트의 리스너를 추가하지만 한번 실행 이후 자동 제거된다.
removelistener() : 지정한 이벤트에 대한 리스너를 제거한다.
emit() : 지정한 이벤트를 발생시킨다.

시스템 이벤트
process 객체는 노드에서 항상 사용할 수 있는 객체이다. on()과 emit() 메소드는 객체를 생성하거나 모듈을 가져오지 않아도 바로 사용 가능하다.
on() 메소드를 호출하면서 이벤트 이름을 exit로 지정하면 내부적으로 프로세스가 끝날 때를 알 수 있다.